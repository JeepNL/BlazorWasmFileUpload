@page "/fileupload"
@using System.IO
@using Microsoft.AspNetCore.Components.Forms;
@using System.Net.Http;
@using System.Threading.Tasks;
@using System.Diagnostics;
@using System.Threading
@inject HttpClient client

<h1>File Upload Test</h1>
<br />

<p>
    <EditForm Model=@upload>
        Upload a local file or a in memory random generated binary file:
        <InputSelect ValueExpression="(() => fileSelection)" Value="@fileSelection" ValueChanged="@((int value) => FileSelection(value))">
            <option value="0">Select ...</option>
            <option value="1">Local file</option>
            <option value="2">Generated file</option>
        </InputSelect>
    </EditForm>
</p>

@if (fileSelection == 1)
{
    <p>Choose local file to upload in chunks of 512 KB</p>

    <p><InputFile OnChange="LoadLocalFile" /></p>

    <p>Upload starts after selection</p>
}
else if (fileSelection == 2)
{
    <EditForm Model="@upload" OnValidSubmit="UploadFile">
        <p>
            Select size of random binary file to create in memory for upload:
            <InputSelect ValueExpression="(() => upload.FileSizeInBytes)" Value="@(upload.FileSizeInBytes / (1024 * 1024))" ValueChanged="@((int value) => CreateRandomFile(value))">
                <option selected value="0">Select file size</option>
                <option value="1">1 MB</option>
                <option value="5">5 MB</option>
                <option value="10">10 MB</option>
                <option value="20">20 MB</option>
            </InputSelect>
        </p>

        @if (isCreatingfile && (upload.FileSizeInBytes != 0))
        {
            <p>Creating binary @upload.FileSizeInMB.ToString("F2") MB file in memory, please wait .. (<i>this can take a while</i>)</p>
        }

        @if (fileSizeSelected)
        {
            <p>
                Now select the chunk size:

                <InputSelect ValueExpression="(() => upload.ChunkSizeInKB)" Value="upload.ChunkSizeInKB" ValueChanged="@((int value) => ChunkSizeSelected(value))">
                    <option seleced value="0">Select chunk size</option>
                    <option value="64">64 KB</option>
                    <option value="128">128 KB</option>
                    <option value="256">256 KB</option>
                    <option value="512">512 KB</option>
                    <option value="1024">1 MB</option>
                    <option value="5120">5 MB</option>
                    <option value="10240">10 MB</option>
                    <option value="20480">20 MB</option>
                </InputSelect>
            </p>

            <p>If you choose a chunk size equal or greater than the file size the file will be uploaded in one go (<i>without chunking = slowest</i>)</p>

            <p>
                <button disabled="@(!chunkSizeSelected)" type="submit">Upload</button>&nbsp;
                <button disabled="@(!canCancel)" @onclick="CancelUpload">Cancel</button>
            </p>
        }
    </EditForm>
}

@if (isUploading)
{
    <p>Uploading @upload.UniqueFileName (<b>@upload.FileSizeInMB.ToString("F2")</b> MB), please wait ...</p>

    var progress = (100.0 * totalBytesRead / upload.FileSizeInBytes).ToString("0");

    <p>Progress (Chunk Size = @upload.ChunkSizeInKB KB)</p>

    <div class="progress">
        <div class="progress-bar" role="progressbar" style="@($"width: {progress}%")" aria-valuenow="@progress" aria-valuemin="0" aria-valuemax="100"></div>
    </div>
}

@if (!String.IsNullOrEmpty(result) && !hasBeenCancelled)
{
    @((MarkupString)result);
}

@code {
    CancellationTokenSource cancellation;
    MemoryStream memoryStream;
    Upload upload = new();

    int fileSelection = 0;
    bool fileSizeSelected = false;
    bool chunkSizeSelected = false;
    bool isCreatingfile = false;
    bool isUploading = false;
    bool canCancel = false;
    bool hasBeenCancelled = false;
    int totalBytesRead = 0;
    string result = string.Empty;

    Task FileSelection(int value)
    {
        ResetForm();
        result = string.Empty;
        fileSelection = value;
        return Task.CompletedTask;
    }

    async Task LoadLocalFile(InputFileChangeEventArgs e)
    {
        upload.ChunkSizeInKB = 512; // default
        upload.FileSizeInBytes = (int)e.File.Size;
        upload.FileName = e.File.Name;

        await using Stream stream = e.File.OpenReadStream(upload.FileSizeInBytes);
        memoryStream = new MemoryStream((int)upload.FileSizeInBytes);
        await stream.CopyToAsync(memoryStream);
        memoryStream.Position = 0;

        await UploadFile();
    }

    async Task CreateRandomFile(int value)
    {
        if (isCreatingfile)
        {
            isCreatingfile = false;
            fileSizeSelected = false;
            upload.FileSizeInBytes = value;
        }

        upload.FileSizeInBytes = value * 1024 * 1024;

        if (upload.FileSizeInBytes == 0)
            return;

        isCreatingfile = true;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(1);

        Random rnd = new();
        Byte[] randomFile = new Byte[upload.FileSizeInBytes];
        rnd.NextBytes(randomFile);
        memoryStream?.Dispose();
        memoryStream = new MemoryStream(randomFile);
        fileSizeSelected = true;
        return;
    }

    Task ChunkSizeSelected(int value)
    {
        upload.ChunkSizeInKB = value;

        if (upload.ChunkSizeInKB == 0)
        {
            chunkSizeSelected = false;
            return Task.CompletedTask;
        }

        chunkSizeSelected = true;
        return Task.CompletedTask;
    }

    async Task UploadFile()
    {
        if (upload.ChunkSizeInKB == 0 || hasBeenCancelled)
            return;

        cancellation?.Dispose();
        cancellation = new CancellationTokenSource();
        canCancel = true;
        chunkSizeSelected = false; // Disable upload button
        hasBeenCancelled = false;

        isUploading = true;
        totalBytesRead = 0;
        int bufferSize = 1024 * upload.ChunkSizeInKB; // bytes
        byte[] buffer = new byte[bufferSize];
        int bytesRead = 0;
        int counter = 0;

        if (string.IsNullOrEmpty(upload.FileName))
            upload.UniqueFileName = Path.GetRandomFileName() + ".bin";
        else
            upload.UniqueFileName = Path.GetRandomFileName() + upload.FileName;

        Stopwatch sw = new();
        sw.Start();
        try
        {
            while ((bytesRead = await memoryStream.ReadAsync(buffer, cancellation.Token)) != 0)
            {
                counter++;
                totalBytesRead += bytesRead;
                using MemoryStream tmpMemoryStream = new MemoryStream(buffer, 0, bytesRead);
                using MultipartFormDataContent content = new();
                content.Add(
                    content: new StreamContent(tmpMemoryStream, Convert.ToInt32(tmpMemoryStream.Length)),
                    name: "\"uploadFile\"",
                    fileName: upload.UniqueFileName
                    );
                var response = await client.PostAsync("/api/Upload", content);
                response.EnsureSuccessStatusCode();

                var fileLocation = response.Headers.Location.ToString();
                StateHasChanged();
            };
        }
        catch (OperationCanceledException)
        {
            hasBeenCancelled = true;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(1);
        }
        finally
        {
            canCancel = false;
        }
        sw.Stop();
        TimeSpan ts = sw.Elapsed;

        if (!hasBeenCancelled)
        {
            upload.Duration = String.Format("{0:00}:{1:00}.{2:00}", ts.Minutes, ts.Seconds, ts.Milliseconds / 10);
            upload.MegaBytesPerSeconds = upload.CalculateMegabytesPerSeconds(ts.TotalSeconds);

            result = "<h4>Result:</h4>";
            result += $"<p><b>{upload.FileSizeInMB.ToString("F2")}</b> MB upload in {((counter == 1) ? "a chunk" : "chunks")} of <b>{upload.ChunkSizeInKB}</b> KB completed in <b>{upload.Duration}</b> (mm:ss.ms)</p>";
            result += $"<p>Throughput: <b>{upload.MegaBytesPerSeconds.ToString("F2")}</b> MB/s</p>";
        }

        ResetForm();
    }

    public void ResetForm()
    {
        chunkSizeSelected = false;
        fileSelection = 0;
        fileSizeSelected = false;
        isCreatingfile = false;
        isUploading = false;
        upload.ChunkSizeInKB = 0;
        upload.Duration = string.Empty;
        upload.FileSizeInBytes = 0;
    }

    public async Task CancelUpload()
    {
        hasBeenCancelled = true;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(1);
        cancellation.Cancel();
        // TODO: Delete uploaded file
    }

    public class Upload
    {
        public string FileName { get; set; } = string.Empty;
        public string UniqueFileName { get; set; } = string.Empty;
        public int FileSizeInBytes { get; set; } = 0;
        public int ChunkSizeInKB { get; set; } = 0;
        public double MegaBytesPerSeconds { get; set; } = 0;
        public string Duration { get; set; } = string.Empty;

        public double FileSizeInMB
        {
            get
            {
                return FileSizeInBytes / (1024F * 1024F);
            }
        }

        public double CalculateMegabytesPerSeconds(double seconds)
        {
            double MBs = FileSizeInMB;
            return MBs / seconds;
        }
    }
}
